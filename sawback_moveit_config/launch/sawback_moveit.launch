<launch>

  <!-- Moveitcpp parmeters 
  <rosparam ns="sawback_moveitcpp" command="load" file="$(find sawback_moveit_config)/config/moveit_cpp.yaml" />
   -->
 <!-- send fake joint values 
  <node if="$(arg fake_execution)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
   <rosparam param="source_list">["/sawback_moveitcpp/fake_controller_joint_states"]</rosparam>
   <remap from="/joint_states" to="/robot/joint_states" />
  </node>
  -->
  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find sawyer_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />



  <!-- Planning Pipeline -->
  <include ns="/sawback_moveitcpp/ompl"
    file="$(find sawback_moveit_config)/launch/ompl_planning_pipeline.launch.xml"/>

  <!-- Trajectory execution  -->
  <include ns="sawback_moveitcpp" file="$(find sawback_moveit_config)/launch/trajectory_execution.launch.xml">
    <arg name="moveit_controller_manager" value="sawback" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <param name="robot_description"
     command="$(find xacro)/xacro $(find sawback_description)/urdf/sawback.urdf.xacro
           gazebo:=false electric_gripper:=true
           pedestal:=false static:=false"/>

  <param name="robot_description_semantic"
    command="$(find xacro)/xacro $(find sawback_moveit_config)/srdf/sawback.srdf.xacro"/>

  <group ns="robot_description_planning">
    <rosparam command="load" file="$(find sawback_moveit_config)/config/joint_limits.yaml"/>
  </group>

  <group ns="robot_description_kinematics">
   <rosparam command="load" file="$(find sawback_moveit_config)/config/kinematics.yaml"/>
  </group>


  <!-- Start robot state publisher
  <node if="$(arg fake_execution)" name="sawback_robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    <remap from="/joint_states" to="/robot/joint_states" />
  </node>
-->

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <!-- Start the actual move_group node/action server -->
   <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen"
      args="joint_states:=/robot/joint_states  $(arg command_args)">
     <!-- Set the display variable, in case OpenGL code is used internally -->
     <env name="DISPLAY" value="$(optenv DISPLAY :0)" />
 
     <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
     <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
     <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
 
     <!-- replaced move_group/MoveGroupExecuteService with -->
 
     <!-- MoveGroup capabilities to load move_group/MoveGroupExecuteTrajectoryAction -->
     <param name="capabilities" value="move_group/MoveGroupCartesianPathService
                                       move_group/MoveGroupExecuteTrajectoryAction
                                       move_group/MoveGroupKinematicsService
                                       move_group/MoveGroupMoveAction
                                       move_group/MoveGroupPickPlaceAction
                                       move_group/MoveGroupPlanService
                                       move_group/MoveGroupQueryPlannersService
                                       move_group/MoveGroupStateValidationService
                                       move_group/MoveGroupGetPlanningSceneService
                                       move_group/ClearOctomapService
                                       " />
 
     <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
     <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
     <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
     <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
     <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
   </node>


</launch>
